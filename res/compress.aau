
//打开需要压缩的文件的路径
mainForm.btn_compress_dir.oncommand = function(id,event){
	mainForm.edit_compress_dir.text = fsys.dlg.opendir(tostring(mainForm.edit_compress_dir.text)) : mainForm.edit_compress_dir.text
}
//忽略选中的不需要压缩的文件
mainForm.btn_compress_filter.oncommand = function(id,event){
	var filetype = string.replace(io.splitpath(mainForm.edit_compress_generate.text).ext,"^\.","")
	if("js" != filetype and "css" != filetype){
		mainForm.msgbox("不被支持的目标文件类型："++tostring(filetype)++'\n'++"请确认后缀.js/.css是生成目标！")
		return ; 
	}
	
	var filelist = fsys.dlg.openEx("忽略[ "++filetype++" ]文件|*."++filetype++"|",,tostring(mainForm.edit_compress_dir.text))
	if(!filelist){
		mainForm.edit_compress_filter.text = string.trim(mainForm.edit_compress_filter.text) //顺便清掉空格
		return ; //没有选中任何文件
	}
	
	for(n,filefullpath in filelist){
		filelist[n] = io.splitpath(filefullpath).file //仅保留文件全名
	}
	
	if(#mainForm.edit_compress_filter.text){ //保留原有的忽略列表
		mainForm.edit_compress_filter.text ++= (";" ++ string.join(filelist, ";"))
	} else {
		mainForm.edit_compress_filter.text = string.join(filelist, ";")
	}
}
//压缩文件
mainForm.btn_compress_generate.oncommand = function(id,event){
	var filetype = string.replace(io.splitpath(mainForm.edit_compress_generate.text).ext,"^\.","")
	if("js" != filetype and "css" != filetype){
		mainForm.msgbox("不被支持的目标文件类型："++tostring(filetype)++'\n'++"请确认后缀.js/.css是生成目标！")
		return ; 
	}
	if( !fsys.isDir(mainForm.edit_compress_dir.text) ){
		mainForm.msgbox("没有发现有效路径！")
		return ; 
	}
	
	fsys.createDir(swapfolder++"/codepack",true) //删除并重建压缩JS、CSS的保存目录
	
	var ignorelist = string.split(mainForm.edit_compress_filter.text,";") //存放所有的要被忽略的文件全名
	for(n,filename in ignorelist){
		ignorelist[filename] = true //用于之后判断文件是否在忽略列表中
	}
	
	var purifylist = {} //保存需要压缩净化的文件列表
	fsys.enum( tostring(mainForm.edit_compress_dir.text), tostring("*."++filetype),
		function(dir,filename,fullpath,findData){ 
			if(filename and ignorelist[filename] != true){
				//fsys.copy(fullpath,swapfolder++"/codepack/")
				table.push(purifylist, fullpath)
			}
		}
	);
	
	var compress_content = "" //保存压缩成单文件后的最终内容
	if("css" == filetype){
		compress_content = csscompressor.pack(purifylist)
	}elseif("js" == filetype){
		compress_content = jscompressor.pack(purifylist)
	} else {
		mainForm.msgbox("不被支持的目标文件类型："++tostring(filetype)++'\n'++"请确认后缀.js/.css是生成目标！")
		return ; 
	}
	
	var save2path = ..fsys.dlg.save(,,mainForm.edit_compress_dir.text,,,mainForm.edit_compress_generate.text)
	if(#save2path and string.save(save2path,compress_content)){
		process.execute( save2path ) //打开压缩后的代码文件
	}
}
